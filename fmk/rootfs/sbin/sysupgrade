#!/bin/sh
. /lib/functions.sh

# initialize defaults
RAMFS_COPY_BIN=""	# extra programs for temporary ramfs root
RAMFS_COPY_DATA=""	# extra data files
export INTERACTIVE=0
export VERBOSE=1
export SAVE_CONFIG=1
export DELAY=
export CONF_IMAGE=
export CONF_BACKUP=
export CONF_RESTORE=
export NEED_IMAGE=
export HELP=0
export FLASH_ONLY=0
export VerID=""
export ASSIGN=0 
export MANUALLY_REBOOT=0 

# parse options
while [ -n "$1" ]; do 
	case "$1" in
		-m) export MANUALLY_REBOOT=1;;
		-i) export INTERACTIVE=1;;
		-d) export DELAY="$2"; shift;;
		-v) export VERBOSE="$(($VERBOSE + 1))";;
		-q) export VERBOSE="$(($VERBOSE - 1))";;
		-n) export SAVE_CONFIG=0;;
		-b|--create-backup) export CONF_BACKUP="$2" NEED_IMAGE=1; shift;;
		-r|--restore-backup) export CONF_RESTORE="$2" NEED_IMAGE=1; shift;;
		-f) export CONF_IMAGE="$2"; shift;;
		-w|--flash-only) export FLASH_ONLY=1;;
		-V|--version) export VerID="$2"; shift;;
		-a|--assign) export ASSIGN=1 ;;
		-h|--help) export HELP=1; break;;
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

export CONFFILES=/tmp/sysupgrade.conffiles
export CONF_TAR=/tmp/sysupgrade.tgz

export ARGV="$*"
export ARGC="$#"
#echo "$ARGV,  $ARGC"
[ -z "$ARGV" -a "$ASSIGN" -eq 0 -a  -z "$NEED_IMAGE" -o $HELP -gt 0 ] && {
	cat <<EOF
Usage: $0 [<upgrade-option>...] <image file or URL>
       $0 [-q] [-i] <backup-command> <file>
       $0 <assign-command> -V <VerID>

upgrade-option:
	-d <delay>   add a delay before rebooting
	-f <config>  restore configuration from .tar.gz (file or url)
	-i           interactive mode
	-n           do not save configuration over reflash
	-c           attempt to preserve all changed files in /etc/
	-q           less verbose
	-v           more verbose
	-w / --flash-only 
	-h | --help  display this help

backup-command:
	-b | --create-backup <file>
	             create .tar.gz of files specified in sysupgrade.conf
	             then exit. Does not flash an image. If file is '-',
	             i.e. stdout, verbosity is set to 0 (i.e. quiet).
	-r | --restore-backup <file>
	             restore a .tar.gz created with sysupgrade -b
	             then exit. Does not flash an image. If file is '-',
	             the archive is read from stdin.

assign-command:
	-a / --assign 
EOF
	exit 1
}

[ -n "$ARGV" -a -n "$NEED_IMAGE" ] && {
	cat <<-EOF
		-b|--create-backup and -r|--restore-backup do not perform a firmware upgrade.
		Do not specify both -b|-r and a firmware image.
	EOF
	exit 1
}

[ -n "$ARGV" -a  "$ASSIGN" -eq 1 ] && {
	cat <<-EOF
		-a/--assign does not perform a firmware upgrade. Do not
		specify both -a and a firmware image.
	EOF
	exit 1
}
# prevent messages from clobbering the tarball when using stdout
[ "$CONF_BACKUP" = "-" ] && export VERBOSE=0

add_uci_conffiles() {
	local file="$1"
	( find $(sed -ne '/^[[:space:]]*$/d; /^#/d; p' \
		/etc/sysupgrade.conf /lib/upgrade/keep.d/* 2>/dev/null) \
		-type f 2>/dev/null;
	  opkg list-changed-conffiles ) | sort -u > "$file"
	
	return 0
}

# hooks
sysupgrade_image_check="platform_check_image"
sysupgrade_init_conffiles="add_uci_conffiles"

include /lib/upgrade

do_save_conffiles() {
	local conf_tar="${1:-$CONF_TAR}"

	[ -z "$(rootfs_type)" ] && {
		echo "Cannot save config while running from ramdisk."
		ask_bool 0 "Abort" && exit
		return 0
	}
	run_hooks "$CONFFILES" $sysupgrade_init_conffiles
	ask_bool 0 "Edit config file list" && vi "$CONFFILES"

	v "Saving config files..."
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar c${TAR_V}zf "$conf_tar" -T "$CONFFILES" 2>/dev/null

	rm -f "$CONFFILES"
}

if [ -n "$CONF_BACKUP" ]; then
	do_save_conffiles "$CONF_BACKUP"
	exit $?
fi

if [ -n "$CONF_RESTORE" ]; then
	if [ "$CONF_RESTORE" != "-" ] && [ ! -f "$CONF_RESTORE" ]; then
		echo "Backup archive '$CONF_RESTORE' not found."
		exit 1
	fi

	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar -C / -x${TAR_V}zf "$CONF_RESTORE"

	v "Restore completed"
	if [ "$MANUALLY_REBOOT" -eq 0 ]; then
		ask_bool 1 "Reboot" && {
			v "Rebooting system..."
			reboot -f
			sleep 5
			echo b 2>/dev/null >/proc/sysrq-trigger
		}
	fi
#exit $?
fi

# ARGV will only be <image file> after cmdline parsed
if [ -n "$ARGV" -o "$ASSIGN" -eq 0 ]; then
	type platform_check_image >/dev/null 2>/dev/null || {
		echo "Firmware upgrade is not implemented for this platform."
		exit 1
	}
	
	for check in $sysupgrade_image_check; do
		( eval "$check \"\$ARGV\"" ) || {
			echo "Image check '$check' failed."
			rm $@
			exit 1
		}
	done

##### john add to STOP cm5001 DSP before upgrade #####
	[ -f /etc/rc.d/S*voip_init.sh ] && {
		/etc/init.d/voip_init.sh stop
	}
#####

	if [ -n "$CONF_IMAGE" ]; then
		case "$(get_magic_word $CONF_IMAGE cat)" in
			# .gz files
			1f8b) ;;
			*)
				echo "Invalid config file. Please use only .tar.gz files"
				exit 1
			;;
		esac
		get_image "$CONF_IMAGE" "cat" > "$CONF_TAR"
		export SAVE_CONFIG=1
	elif ask_bool $SAVE_CONFIG "Keep config files over reflash"; then
		[ "$FLASH_ONLY" -eq 0 ] && do_save_conffiles
		export SAVE_CONFIG=1
	else
		export SAVE_CONFIG=0
	fi
#run_hooks "" $sysupgrade_pre_upgrade
	VerID=$(get_rev_rl $1)

	if [ -n "$(rootfs_type)" -a "$FLASH_ONLY" -eq 0 ] ; then #get rootfs_type is mini_fo
		v "Switching to ramdisk..."
		run_ramfs '. /lib/functions.sh; include /lib/upgrade; do_upgrade'
	else
		do_upgrade
	fi
else
	set_zone $VerID
	[ $? -eq 1 ] && exit 1
	[ "$SAVE_CONFIG" -eq 1 ] && do_save_conffiles
	run_ramfs '. /lib/functions.sh; include /lib/upgrade; do_assign'
fi
